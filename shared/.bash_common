#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2317

function warn() {
  echo -e "${RED}WARNING: $1${COLOR_NONE}" >&2
}
export -f warn

function initialize_homebrew() {
  if ! command -v brew 1>/dev/null 2>&1; then
    warn "brew not found in \$PATH. Skipping Homebrew initialization."
    return 1
  fi

  BREW_PREFIX="$(brew --prefix)"

  # Adds GNU versions of tools to path
  PATH="$BREW_PREFIX/opt/bc/bin:$PATH"
  PATH="$BREW_PREFIX/opt/bzip2/bin:$PATH"
  PATH="$BREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/curl/bin:$PATH"
  PATH="$BREW_PREFIX/opt/file-formula/bin:$PATH"
  PATH="$BREW_PREFIX/opt/findutils/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/gnu-sed/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/gnu-tar/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/gnu-which/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/grep/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/inetutils/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/libxml2/bin:$PATH"
  PATH="$BREW_PREFIX/opt/make/libexec/gnubin:$PATH"
  PATH="$BREW_PREFIX/opt/openjdk/libexec/openjdk.jdk/Contents/Home/bin/:$PATH"
  PATH="$BREW_PREFIX/opt/openssl@1.1/bin:$PATH"
  PATH="$BREW_PREFIX/opt/util-linux/bin:$PATH"
  PATH="$BREW_PREFIX/opt/util-linux/sbin:$PATH"
  PATH="$BREW_PREFIX/opt/unzip/bin:$PATH"
  PATH="$BREW_PREFIX/opt/zip/bin:$PATH"
  PATH="/usr/local/sbin:$PATH" # Added after `brew doctor` warning

  # For building Python
  if [[ -z "${PKG_CONFIG_PATH:-}" ]]; then
    PKG_CONFIG_PATH=
  fi
  PKG_CONFIG_PATH="$BREW_PREFIX/opt/tcl-tk/lib/pkgconfig:$PKG_CONFIG_PATH"
  PKG_CONFIG_PATH="$BREW_PREFIX/opt/openssl@1.1/lib/pkgconfig:$PKG_CONFIG_PATH"
  export PKG_CONFIG_PATH

  # Add completion for some Brew-installed programs
  source "$BREW_PREFIX"/etc/profile.d/bash_completion.sh
  source "$BREW_PREFIX"/etc/bash_completion.d/brew
  source "$BREW_PREFIX"/etc/bash_completion.d/brew-services
  # There is a bug with the docker Bash completion files that prevents using `set -e`
  if [[ -o errexit ]]; then
    set +e
    ENABLE_ERREXIT=1
  fi
  source "$BREW_PREFIX"/etc/bash_completion.d/docker
  source "$BREW_PREFIX"/etc/bash_completion.d/docker-compose
  if [[ -n "${ENABLE_ERREXIT:-}" ]]; then
    set -e
    unset ENABLE_ERREXIT
  fi
  source "$BREW_PREFIX"/etc/bash_completion.d/git-completion.bash
  source "$BREW_PREFIX"/etc/bash_completion.d/npm
  source "$BREW_PREFIX"/etc/bash_completion.d/pandoc
  source "$BREW_PREFIX"/etc/bash_completion.d/tldr
  source "$BREW_PREFIX"/etc/bash_completion.d/yt-dlp
  for f in "$BREW_PREFIX"/opt/util-linux/etc/bash_completion.d/*; do
    source "$f"
  done

  # Override default Homebrew settings
  # See https://docs.brew.sh/Manpage#environment for explanations
  export HOMEBREW_UPDATE_REPORT_ALL_FORMULAE=1
}
export -f initialize_homebrew

function initialize_spack() {
  USER_SPACK_ROOT=$HOME/.spack_install
  SPACK_UPSTREAM_FILE="$HOME/.spack/upstreams.yaml"
  if [[ -f "$SPACK_UPSTREAM_FILE" ]] ; then
    # This is unfortunately one of the better ways to extract information from a YAML file
    SYSTEM_SPACK_ROOT=$(sed -n 's/.*install_tree: \(.*\)\/opt\/spack.*/\1/p' "$SPACK_UPSTREAM_FILE")
  fi
  if [[ -d "$USER_SPACK_ROOT" ]] && { [[ -z "${SYSTEM_SPACK_ROOT:-}" ]] || [[ -d "$SYSTEM_SPACK_ROOT" ]] ; }; then
    SPACK_ROOT=$USER_SPACK_ROOT
  elif [[ -d "${SYSTEM_SPACK_ROOT:-}" ]]; then
    SPACK_ROOT=$SYSTEM_SPACK_ROOT
  else
    warn 'No complete Spack install found. Skipping Spack initialization.'
    return 1
  fi

  export SPACK_SKIP_MODULES=1 # Greatly speed up initialization
  . "$SPACK_ROOT"/share/spack/setup-env.sh
  if [ "$SHLVL" -eq '1' ]; then
    spack load --only package curl diffutils direnv findutils gawk git gmake grep gzip jq less openjdk openssh procps screen sed strace tar tree util-linux vim wget which coreutils
    if command -v nvidia-smi 1>/dev/null 2>&1; then
      spack load --only=package nvtop
    fi
  fi
  if which git | grep -q spack; then
    source "$(spack location --install-dir git)/share/git-completion.bash"
  fi
}
export -f initialize_spack

function initialize_python() {
  # From https://docs.python-guide.org/dev/pip-virtualenv/#requiring-an-active-virtual-environment-for-pip
  export PIP_REQUIRE_VIRTUALENV=true

  # For pyenv and pyenv-virtualenv setup
  export PYENV_ROOT="$HOME/.pyenv"
  if [[ -d "$PYENV_ROOT" ]] ; then
    export PATH="$PYENV_ROOT/bin:$PATH"
  fi
  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    if pyenv commands | grep virtualenv-init 1>/dev/null 2>&1; then
      eval "$(pyenv virtualenv-init -)"
    fi
  else
    warn "pyenv not found in \$PATH. Skipping pyenv initialization."
  fi

  # Generated with `pip completion --bash >> ~/.bash_profile`
  # pip bash completion start
  _pip_completion()
  {
      # shellcheck disable=SC2207
      COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                     COMP_CWORD=$COMP_CWORD \
                     PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
  }
  complete -o default -F _pip_completion pip
  # pip bash completion end
}
export -f initialize_python

function initialize_node() {
  # For nodenv setup
  export NODENV_ROOT="$HOME/.nodenv"
  if [[ -d "$NODENV_ROOT" ]] ; then
    export PATH="$NODENV_ROOT/bin:$PATH"
  fi
  if command -v nodenv 1>/dev/null 2>&1; then
    eval "$(nodenv init -)"
  else
    warn "nodenv not found in \$PATH. Skipping nodenv initialization."
  fi
}
export -f initialize_node

function initialize_direnv() {
  if command -v direnv 1>/dev/null 2>&1; then
    # From https://direnv.net/docs/hook.html
    eval "$(direnv hook bash)"
  else
    warn "direnv not found in \$PATH. Skipping direnv initialization."
  fi
}
export -f initialize_direnv

function initialize_slurm() {
  if ! command -v sinfo 1>/dev/null 2>&1; then
    warn "sinfo not found in \$PATH. Skipping Slurm initialization."
    return 1
  fi

  # See `-o <output_format>, --format=<output_format>` under `man squeue` for what each field does.
  #format="\"%8i %9g %9u %5P %35j %2t %12M %12l %5D %3C %R %H %I %J %z\""
  #flags="-S +i -o ${format}"

  # Show detailed information about the given job ID
  alias c="scontrol show job -d"
  # See `-o <output_format>, --format=<output_format>` under `man squeue` for what each field does.
  format="\"%i %9u %9a %9P %9q %35j %2t %10M %10l %5D %3C %z %R\""
  flags="-S +i -o ${format}"
  # Show the status of only your jobs
  # shellcheck disable=SC2139
  alias q="squeue -u \$USER ${flags}"
  # Show the status of all cluster jobs
  # shellcheck disable=SC2139
  alias qa="squeue -a ${flags}"

  # Display a live view of my currently running jobs
  function qwatch() {
    alias q | cut -f 2 -d = | xargs watch -n 1
  }
  export -f qwatch

  function qawatch() {
    alias qa | cut -f 2 -d = | xargs watch -n 1
  }
  export -f qawatch
}
export -f initialize_direnv

function set_aliases() {
  alias cless="less --raw-control-chars"
  alias diff="diff --color=auto --unified"
  alias grep="grep --color=auto"
  alias ls="ls --color=auto"
  alias tree="tree -C"
}
export -f set_aliases

function set_variables() {
  # Silence warning to switch to zsh on macOS
  if [ "$(uname)" == 'Darwin' ]; then
    export BASH_SILENCE_DEPRECATION_WARNING=1
  fi

  # From https://www.shellhacks.com/tune-command-line-history-bash/
  export HISTSIZE=1000000
  export HISTFILESIZE=1000000
  export HISTCONTROL=ignoredups

  export TERM=xterm-256color

  # Technically different but should be safe to set both to vim
  # See https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference
  export EDITOR=vim
  export VISUAL=vim

  # Define colors
  # Based on https://github.com/KittyGiraudel/dotfiles/blob/a2555f5a50a527fad0a5de686dce20d7499efb9e/.bashrc
  # and https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
  # and https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
  export YELLOW="\033[38;1;33m"
  export TEAL="\033[38;5;31m"
  export BLUE="\033[38;5;33m"
  export RED="\033[38;0;31m"
  export PINK="\033[38;5;213m"
  export PURPLE="\033[38;5;141m"
  export COLOR_NONE="\e[0m"
}
export -f set_variables

function set_functions() {
  function len() {
    echo -n "$1" | wc -m
  }
  export -f len

  function now() {
    date -u +'%Y_%m_%d_%H_%M_%S'
  }
  export -f now

  # WARNING: This function is not cryptographically secure and should be replaced!
  function gen_pwd() {
    warn 'This function is not cryptographically secure and should be replaced!'
    local length="$1"
    python -c "import base64, uuid; print(base64.b32encode(uuid.uuid4().bytes).decode()[:$length].lower())"
  }
  export -f gen_pwd

  # Source: https://www.gnu.org/software/coreutils/manual/coreutils.html#Random-sources
  function get_seeded_random() {
    local seed="$1"
    openssl enc -aes-256-ctr -pass pass:"$seed" -nosalt \
      </dev/zero 2>/dev/null
  }
  export -f get_seeded_random

  function prettyxml () {
    if ! command -v xmllint 1>/dev/null 2>&1; then
      warn "xmllint not found in \$PATH. Function '${FUNCNAME[0]}' unavailable."
      return 1
    fi

    xmllint --format -
  }
  export -f prettyxml

  function nwatch() {
    if ! command -v nvidia-smi 1>/dev/null 2>&1; then
      warn "nvidia-smi not found in \$PATH. Function '${FUNCNAME[0]}' unavailable."
      return 1
    fi

    watch -n 1 nvidia-smi
  }
  export -f nwatch
}
export -f set_functions

function initialize_trash() {
  if ! command -v trash 1>/dev/null 2>&1; then
    warn "trash not found in \$PATH. Skipping trash initialization."
    return 1
  fi

  # To make `rm` safer
  function rm() {
    trash "$@" || true
  }
  export -f rm
  # To use real `rm` instead of `trash` (useful for ./configure and other scripts)
  function realrm() {
      bash -c "unset -f rm; $*"
  }
  export -f realrm
}
export -f initialize_trash

function set_prompt() {
  # e.g., `d21ml-ahedges:ahedges dotfiles$ `
  PS1="\[${TEAL}\]\h:\u \[${PURPLE}\]\W\[${COLOR_NONE}\]\$ "

  # From https://wiki-dev.bash-hackers.org/scripting/debuggingtips#making_xtrace_more_useful
  # e.g., `+(/Users/ahedges/.bash_common:19): initialize_homebrew(): BREW_PREFIX=/usr/local`
  PS4='+(${BASH_SOURCE:-}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
}
export -f set_prompt

function load_oldpwd() {
  # Load $OLDPWD value from the previous session
  export OLDPWD_CACHE="$HOME/.cache/oldpwd"
  if [[ -f "$OLDPWD_CACHE" ]] ; then
    OLDPWD=$(cat "$OLDPWD_CACHE")
    export OLDPWD
  fi
}
export -f load_oldpwd

function save_oldpwd() {
  # Save $PWD value for a future session
  if [[ -n "${OLDPWD_CACHE:-}" ]] ; then
    mkdir -p "$(dirname "$OLDPWD_CACHE")"
    echo "$PWD" >"$OLDPWD_CACHE"
  fi
}
export -f save_oldpwd
